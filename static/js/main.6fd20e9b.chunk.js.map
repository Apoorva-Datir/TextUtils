{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","defaultProps","TextForm","useState","text","changedText","btnText","setbtnText","style","color","heading","value","onChange","event","target","rows","backgroundColor","caretColor","cursor","newText","toUpperCase","showAlert","replace","word","index","toLowerCase","onDoubleClick","result","charAt","slice","split","join","document","getElementById","select","navigator","clipboard","writeText","length","Alert","alert","role","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","ReactDOM","render"],"mappings":"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","file":"static/js/main.6fd20e9b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n            {/* props.title so we can change it anytime in App.js and since its a js thingy add curly braces */}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <a className=\"nav-link\" href=\"/about\">\r\n                  About\r\n                </a> */}\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light'? 'dark' : 'light'}`}>\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick = {props.toggleMode}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n                Enable {props.mode==='light'?'dark' : 'light'} mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n// this is to check if we are correcty sending the type of props i.e.idhar agar string likha and udhar number bhej diya\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\n//if you forget to pass props in the App.js file then this will keep a default value\r\nNavbar.defaultProps = {\r\n  title: \"Set title\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TextForm(props) {\r\n  const [text, changedText] = useState(\"\");\r\n  // changedText(\"New text\");\r\n  const changeToUpper = () => {\r\n    // console.log(\"Uppercase button is clicked!!\" + text);\r\n    let newText = text.toUpperCase();\r\n    changedText(newText);\r\n    props.showAlert(\"Converted to Uppercase\",\"success\");\r\n  };\r\n  const changeToLower = () => {\r\n    // console.log(\"Lowercase button is clicked!!\" + text);\r\n    let newText = text.toLowerCase();\r\n    changedText(newText);\r\n    props.showAlert(\"Converted to Lowercase\",\"success\");\r\n  };\r\n  const changeToCamelCase = () => {\r\n    // console.log(\"Camel-case button is clicked!!\" + text); =>used console.log only for understanding and debugging\r\n    let newText = function camelCase(text) {\r\n      return text\r\n        .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (word, index) {\r\n          return index === 0 ? word.toLowerCase() : word.toUpperCase();\r\n        })\r\n        .replace(/\\s+/g, \"\");\r\n        \r\n    };\r\n    changedText(newText);\r\n    setbtnText(\"Convert to Camel-case\");\r\n    props.showAlert(`Converted to ${btnText}`,\"success\");\r\n  };\r\n  const [btnText, setbtnText] = useState(\"Convert to Camel-case\");\r\n  const changeToOriginal = () => {\r\n    // console.log(\"Lowercase button is clicked!!\" + text);\r\n    let result = text.replace(/([A-Z])/g, \" $1\");\r\n    let newText = result.charAt(0).toUpperCase() + result.slice(1);\r\n    changedText(newText);\r\n    setbtnText(\"Original\");\r\n  };\r\n  const clearText = () => {\r\n    // console.log(\"Lowercase button is clicked!!\" + text);\r\n    let newText = \"\";\r\n    changedText(newText);\r\n    props.showAlert(\"Cleared text\",\"success\");\r\n\r\n    \r\n  };\r\n  // to remove extra space\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    changedText(newText.join(\" \"));\r\n    props.showAlert(\"Removed extra spaces\",\"success\");\r\n  };\r\n  // to copy text\r\n  const copyText = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text copied\",\"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"Something's changed!!\");\r\n    changedText(event.target.value);\r\n    // event.target.value is used to get the value that triggered the event => this syntax we'll mostly use\r\n    // in case of input fields\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h3>{props.heading}</h3>\r\n        <div className=\"mb-3\">\r\n          {/* <label for=\"myBox\" className=\"form-label\"></label> */}\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"6\"\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"#8d8dff\" : \"grey\",\r\n              color: props.mode === 'light' ? 'black' : 'white' ,\r\n              caretColor : props.mode === 'light' ? 'black' : 'white' ,\r\n              cursor : props.mode === 'light' ? 'auto' : 'default' ,\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        {/* <button className=\"btn btn-warning mx-2\" onClick={changeToOriginal}>\r\n        Original\r\n      </button> */}\r\n        <button className={`btn btn-${props.mode === \"light\" ? \"dark\" : \"warning\"}`} onClick={changeToUpper}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.mode === \"light\" ? \"dark\" : \"warning\"} mx-2`}\r\n          onClick={changeToCamelCase}\r\n          onDoubleClick={changeToOriginal}\r\n        >\r\n          {btnText}\r\n        </button>\r\n        <button className={`btn btn-${props.mode === \"light\" ? \"dark\" : \"warning\"}`} onClick={changeToLower}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className={`btn btn-${props.mode === \"light\" ? \"dark\" : \"warning\"} mx-2`} onClick={handleExtraSpaces}>\r\n          Remove extra spaces\r\n        </button>\r\n        <button className={`btn btn-${props.mode === \"light\" ? \"light\" : \"info\"} mx-2`} onClick={copyText}>\r\n          Copy\r\n        </button>\r\n        <button className={`btn btn-${props.mode === \"light\" ? \"light\" : \"info\"} mx-2`} onClick={clearText}>\r\n          Clear\r\n        </button>\r\n        <br />\r\n        <p className=\"stuff my-3 mx-2\">\r\n          [p.s. double click on camel case button to get original text]\r\n        </p>\r\n      </div>\r\n      {/* a container for text summary */}\r\n      <div\r\n        className=\"container my-4\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h3>Your text summary</h3>\r\n        <p>\r\n          <b>\r\n            <i>\r\n              {text.split(\" \").length} words and {text.length} characters\r\n            </i>\r\n          </b>\r\n        </p>\r\n        <p>\r\n          <b>\r\n            <i>\r\n              Average time required to read the above text :{\" \"}\r\n              {0.008 * text.split(\" \").length} minutes\r\n            </i>\r\n          </b>\r\n        </p>\r\n        <hr />\r\n\r\n        <h3>Preview</h3>\r\n        <p>{text===''?\"Enter a text to get a preview here!\" : text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TextForm;\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    //   this below line of code means if props.alert is not null then only return the part inside the div\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n       \r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport Alert from \"./components/Alert\";\r\n// import About from \"./components/About\";\r\nimport React, { useState } from \"react\";\r\n\r\n// import { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState(null); //we'll use it as an object.\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"grey\"; //set light bg for dark navbar'\r\n      showAlert(\"Dark mode is enabled\", \"success\");\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"#8d8dff\";\r\n      showAlert(\"Light mode is enabled\", \"success\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <Router> */}\r\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\r\n        {/* here you can change it as many times as you want */}\r\n        <Alert alert={alert} />\r\n        <div className=\"container my-5\">\r\n          {/* my-5 is a property in bootstrap it give a margin of 5 along y axis(top and bottom) in bootstrap */}\r\n\r\n          {/* <Switch>\r\n            <Route exact path=\"/about\">\r\n              <About />\r\n            </Route> */}\r\n\r\n            {/* <Route exact path=\"/\"> */}\r\n              <TextForm\r\n                showAlert={showAlert}\r\n                heading=\"Enter the text to analyze\"\r\n                mode={mode}\r\n              />\r\n            {/* </Route> */}\r\n          {/* </Switch> */}\r\n\r\n          {/* added a container here to make the textarea look a bit better and get it to center */}\r\n        </div>\r\n      {/* </Router> */}\r\n    </>\r\n  ); //JSX\r\n}\r\n\r\nexport default App;\r\n","// this is the starting point of any react project,the code written here will be the first to execute when we open the browser\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\"; //here we are importing from App.js but in js the extension .js can be omitted\r\n\r\n// The code below is JSX code(HTML in JavaScript)\r\nReactDOM.render(<App />, document.getElementById(\"root\")); //this id \"root\" is in the index.html file in the public folder\r\n"],"sourceRoot":""}